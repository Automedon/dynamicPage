{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","hours","Date","getHours","min","getMinutes","sec","getSeconds","phrase","name","localStorage","getItem","focus","setBg","_this","setPhrases","setState","currentTime","onChange","e","setItem","target","id","textContent","_this2","this","setInterval","_this$state","react_default","a","createElement","className","concat","slice","suppressContentEditableWarning","contentEditable","onInput","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAqEeA,oNAjEXC,MAAQ,CACJC,OAAO,IAAIC,MAAOC,WAClBC,KAAK,IAAIF,MAAOG,aAChBC,KAAK,IAAIJ,MAAOK,aAChBC,OAAQ,GACRC,KAAMC,aAAaC,QAAQ,SAAW,eACtCC,MAAOF,aAAaC,QAAQ,UAAY,mBAI5CE,MAAQ,WACJ,OAAIC,EAAKd,MAAMC,MAAQ,GACZ,UACAa,EAAKd,MAAMC,MAAQ,GACnB,YAEA,WAGfc,WAAa,WACLD,EAAKd,MAAMC,MAAQ,GACnBa,EAAKE,SAAS,CAACR,OAAQ,iBAChBM,EAAKd,MAAMC,MAAQ,GAC1Ba,EAAKE,SAAS,CAACR,OAAQ,mBAEvBM,EAAKE,SAAS,CAACR,OAAQ,kBAG/BS,YAAc,WACVH,EAAKE,SAAS,CACVf,OAAO,IAAIC,MAAOC,WAClBC,KAAK,IAAIF,MAAOG,aAChBC,KAAK,IAAIJ,MAAOK,kBAGxBW,SAAW,SAACC,GACRT,aAAaU,QAAQ,CAACD,EAAEE,OAAOC,IAAKH,EAAEE,OAAOE,kGAG5B,IAAAC,EAAAC,KAEjBA,KAAKV,aACLW,YAAY,kBAAMF,EAAKP,eAAe,sCAGjC,IAAAU,EACqBF,KAAKzB,MAAxBC,EADF0B,EACE1B,MAAOG,EADTuB,EACSvB,IAAKE,EADdqB,EACcrB,IACnB,OACIsB,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,KAAKZ,SACjBe,EAAAC,EAAAC,cAAA,QAAMR,GAAG,QAAT,GAAAU,QAAqB,IAAM/B,GAAOgC,OAAO,GAAzC,KAAAD,QAAgD,IAAM5B,GAAK6B,OAAO,GAAlE,KAAAD,QAAyE,IAAM1B,GAAK2B,OAAO,KAC3FL,EAAAC,EAAAC,cAAA,MAAIR,GAAG,YACHM,EAAAC,EAAAC,cAAA,eAAAE,OAAUP,KAAKzB,MAAMQ,OAArB,MACAoB,EAAAC,EAAAC,cAAA,QAAMR,GAAG,OAAOY,gCAA8B,EAACC,iBAAe,EACxDC,QAASX,KAAKP,UAAWO,KAAKzB,MAAMS,OAE9CmB,EAAAC,EAAAC,cAAA,0CAGAF,EAAAC,EAAAC,cAAA,MAAIR,GAAG,QAAQY,gCAA8B,EAACC,iBAAe,EACzDC,QAASX,KAAKP,UAAWO,KAAKzB,MAAMY,eA5DtCyB,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d3614bf.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        hours: new Date().getHours(),\n        min: new Date().getMinutes(),\n        sec: new Date().getSeconds(),\n        phrase: '',\n        name: localStorage.getItem('name') || '[Enter Name]',\n        focus: localStorage.getItem('focus') || '[Enter Focus]'\n\n    };\n\n    setBg = () => {\n        if (this.state.hours < 12) {\n            return 'morning'\n        } else if (this.state.hours < 18) {\n            return 'afternoon'\n        } else {\n            return 'night'\n        }\n    };\n    setPhrases = () => {\n        if (this.state.hours < 12) {\n            this.setState({phrase: 'Good Morning'})\n        } else if (this.state.hours < 18) {\n            this.setState({phrase: 'Good Afternoon'})\n        } else {\n            this.setState({phrase: 'Good Night'})\n        }\n    };\n    currentTime = () => {\n        this.setState({\n            hours: new Date().getHours(),\n            min: new Date().getMinutes(),\n            sec: new Date().getSeconds(),\n        })\n    };\n    onChange = (e) => {\n        localStorage.setItem([e.target.id], e.target.textContent)\n    };\n\n    componentWillMount() {\n\n        this.setPhrases();\n        setInterval(() => this.currentTime(), 1000)\n    }\n\n    render() {\n        const {hours, min, sec} = this.state;\n        return (\n            <div className={this.setBg()}>\n                <time id='time'>{`${('0' + hours).slice(-2)}:${('0' + min).slice(-2)}:${('0' + sec).slice(-2)}`}</time>\n                <h1 id='greeting'>\n                    <span>{`${this.state.phrase} `}</span>\n                    <span id='name' suppressContentEditableWarning contentEditable\n                          onInput={this.onChange}>{this.state.name}</span>\n                </h1>\n                <h2>\n                    What Is Your Focus For Today\n                </h2>\n                <h2 id='focus' suppressContentEditableWarning contentEditable\n                    onInput={this.onChange}>{this.state.focus}</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}